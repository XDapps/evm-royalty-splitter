/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SplitRoyaltyInterface extends ethers.utils.Interface {
  functions: {
    "distributeERC20RoyaltyTokenBalence(address)": FunctionFragment;
    "owners(uint256)": FunctionFragment;
    "receiveRoyalty(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "distributeERC20RoyaltyTokenBalence",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveRoyalty",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "distributeERC20RoyaltyTokenBalence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveRoyalty",
    data: BytesLike
  ): Result;

  events: {
    "RoyaltyPaidERC20(address,address,uint256,uint256)": EventFragment;
    "RoyaltyPaidNative(address,uint256,uint256)": EventFragment;
    "RoyaltyReceived(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoyaltyPaidERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyPaidNative"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyReceived"): EventFragment;
}

export class SplitRoyalty extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SplitRoyaltyInterface;

  functions: {
    distributeERC20RoyaltyTokenBalence(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { royaltyAddress: string; royalty: BigNumber }
    >;

    receiveRoyalty(
      amountReceived: BigNumberish,
      uid: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  distributeERC20RoyaltyTokenBalence(
    _tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owners(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { royaltyAddress: string; royalty: BigNumber }
  >;

  receiveRoyalty(
    amountReceived: BigNumberish,
    uid: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    distributeERC20RoyaltyTokenBalence(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { royaltyAddress: string; royalty: BigNumber }
    >;

    receiveRoyalty(
      amountReceived: BigNumberish,
      uid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    RoyaltyPaidERC20(
      token?: string | null,
      to?: string | null,
      amount?: null,
      uid?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { token: string; to: string; amount: BigNumber; uid: BigNumber }
    >;

    RoyaltyPaidNative(
      to?: string | null,
      amount?: null,
      uid?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { to: string; amount: BigNumber; uid: BigNumber }
    >;

    RoyaltyReceived(
      from?: string | null,
      amount?: null,
      uid?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { from: string; amount: BigNumber; uid: BigNumber }
    >;
  };

  estimateGas: {
    distributeERC20RoyaltyTokenBalence(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    receiveRoyalty(
      amountReceived: BigNumberish,
      uid: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    distributeERC20RoyaltyTokenBalence(
      _tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveRoyalty(
      amountReceived: BigNumberish,
      uid: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
